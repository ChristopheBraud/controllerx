# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master
- dev
- refs/tags/*

pr:
- master
- dev

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build
    displayName: Build Stage
    jobs: 
      - job: Build
        displayName: Build job

        strategy:
          matrix:
            Python36:
              python.version: '3.6'
            Python37:
              python.version: '3.7'
            Python38:
              python.version: '3.8'
              
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(python.version)'
            displayName: 'Prepare Python $(python.version)'
          - script: pip install pipenv
            displayName: 'Install pipenv'
          - script: pipenv lock --dev
            displayName: 'Lock dependencies'
          - script: pipenv install --system --deploy --dev
            displayName: 'Install dependencies'
          - script: black apps/controllerx tests --check
            displayName: Formatter (black)
          - script: flake8 apps/controllerx tests
            displayName: Styling (flake8)
          - script: mypy apps/controllerx
            displayName: Typing (mypy)
          - script: pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=apps --cov-report=xml --cov-report=html
            displayName: 'Tests (pytest)'
          - task: PublishCodeCoverageResults@1
            displayName: Publish code coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
  - stage: Deploy
    displayName: Deploy Stage
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/v'))
    jobs:
      - job: Deploy
        displayName: Deploy job
        steps:
        - task: ArchiveFiles@2
          displayName: Zipping apps/controllerx folder
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/apps/controllerx' 
            includeRootFolder: false 
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/controllerx.zip'
        - task: GithubRelease@0
          displayName: Create GitHub Release
          inputs:
            gitHubConnection: github.com_xaviml
            repositoryName: xaviml/controllerx
            isPreRelease: ${{ contains(variables['Build.SourceBranchName'], 'b') }}
            assets: '$(Build.ArtifactStagingDirectory)/controllerx.zip'
